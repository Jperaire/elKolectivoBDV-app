import { createContext } from "react";

import { User } from "firebase/auth";
import { AppUserData } from "../types";

interface AuthContextType {
    user: User | null;
    loading: boolean;
    logout: () => void;
    userData: AppUserData | null;
}

export const AuthContext = createContext<AuthContextType>({
    user: null,
    loading: true,
    logout: async () => {},
    userData: null,
});
import { useEffect, useState } from "react";

import { onAuthStateChanged, User } from "firebase/auth";
import { auth } from "../firebase/auth";
import { getUserFromFirestore } from "../firebase/user-service";

import { AuthContext } from "./AuthContext";

import { AppUserData } from "../types";

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
    const [user, setUser] = useState<User | null>(null);
    const [userData, setUserData] = useState<AppUserData | null>(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
            setUser(firebaseUser);

            if (firebaseUser) {
                try {
                    const data = await getUserFromFirestore(firebaseUser.uid);
                    setUserData(data);
                } catch (e) {
                    console.error("Error loading userData:", e);
                    setUserData(null);
                }
            } else {
                setUserData(null);
            }

            setLoading(false);
        });

        return () => unsubscribe();
    }, []);

    return (
        <AuthContext.Provider value={{ user, loading, userData, logout }}>
            {children}
        </AuthContext.Provider>
    );
};
import type { Timestamp } from "firebase/firestore";

export type Role = "user" | "admin";

export interface AppUserData {
    email: string | null;
    role: Role;
    displayName: string | null;
    photoURL: string | null;
    createdAt?: Timestamp;
}
import { signInWithEmailAndPassword } from "firebase/auth";
import { auth } from "../auth";

export const loginWithEmail = async (email: string, password: string) => {
    return await signInWithEmailAndPassword(auth, email, password);
};
import { sendPasswordResetEmail } from "firebase/auth";
import { auth } from "../auth";

export function resetPassword(email: string) {
    return sendPasswordResetEmail(auth, email);
}
import { signOut } from "firebase/auth";
import { auth } from "../auth";

export const signOutUser = (): Promise<void> => signOut(auth);
export { signOutUser } from "./signOutUser";
export { loginWithEmail } from "./loginWithEmail";
export { loginWithGoogle } from "./loginWithGoogle";
export { registerWithEmail } from "./registerWithEmail";
export { resetPassword } from "./resetPassword";
export { deleteAccount } from "./deleteAccount";
import {
    deleteUser,
    reauthenticateWithCredential,
    EmailAuthProvider,
} from "firebase/auth";
import { auth } from "../auth";

export async function deleteAccount(password: string) {
    if (!auth.currentUser?.email) throw new Error("No user signed in");

    const credential = EmailAuthProvider.credential(
        auth.currentUser.email,
        password
    );
    await reauthenticateWithCredential(auth.currentUser, credential);
    await deleteUser(auth.currentUser);
}
import {
    signInWithEmailAndPassword,
    GoogleAuthProvider,
    signInWithPopup,
} from "firebase/auth";
import { ensureUserDoc } from "../user-service";
import { auth } from "../auth";

export const loginWithEmail = (email: string, password: string) =>
    signInWithEmailAndPassword(auth, email, password);

export const loginWithGoogle = async () => {
    const provider = new GoogleAuthProvider();
    const cred = await signInWithPopup(auth, provider);
    await ensureUserDoc(cred.user.uid, {
        email: cred.user.email,
        displayName: cred.user.displayName ?? null,
        photoURL: cred.user.photoURL ?? null,
    });
    return cred;
};
import { createUserWithEmailAndPassword, updateProfile } from "firebase/auth";
import { auth } from "../auth";
import { createUserInFirestore } from "../user-service";

export const registerWithEmail = async (
    name: string,
    email: string,
    password: string
) => {
    const { user } = await createUserWithEmailAndPassword(
        auth,
        email,
        password
    );

    await updateProfile(user, { displayName: name });

    await createUserInFirestore(user.uid, {
        email: user.email ?? email,
        role: "user",
        displayName: name,
        photoURL: user.photoURL ?? null,
    });
    return user;
};
import {
    doc,
    setDoc,
    getDoc,
    serverTimestamp,
    updateDoc,
} from "firebase/firestore";

import { AppUserData } from "../types";
import { updateProfile } from "firebase/auth";
import { auth } from "./auth";
import { db } from "../../firebase/firestore";

export const createUserInFirestore = async (
    uid: string,
    data: Partial<AppUserData>
) => {
    const ref = doc(db, "users", uid);
    await setDoc(
        ref,
        { ...data, createdAt: serverTimestamp() },
        { merge: true }
    );
};

export const getUserFromFirestore = async (uid: string) => {
    const ref = doc(db, "users", uid);
    const snap = await getDoc(ref);
    return snap.exists() ? (snap.data() as AppUserData) : null;
};

export async function ensureUserDoc(uid: string, data: Partial<AppUserData>) {
    const ref = doc(db, "users", uid);
    const snap = await getDoc(ref);
    if (!snap.exists()) {
        await setDoc(ref, {
            ...data,
            role: "user",
            createdAt: serverTimestamp(),
        });
    }
}

export async function updateUserProfile(
    uid: string,
    displayName: string,
    photoURL: string | null
) {
    if (auth.currentUser) {
        await updateProfile(auth.currentUser, {
            displayName,
            photoURL: photoURL ?? undefined,
        });
    }
    await updateDoc(doc(db, "users", uid), {
        displayName,
        photoURL: photoURL ?? null,
    });
}
import { getAuth } from "firebase/auth";
import { app } from "../../firebase/firebase-config";

export const auth = getAuth(app);
